from ast import arg
from os import stat, times
from time import time

from numpy import average, std
from planner.cbs import CBS
from cbsclass import CBSClass

import pandas as pd
import statistics
import matplotlib.pyplot as plt

import random
import sys


args = sys.argv[1:]
if args[0] == 'collect':
    freeCells = [(15, 21), (7, 17), (18, 17), (15, 30), (26, 30), (18, 26), (27, 4), (8, 0), (19, 0), (27, 13), (30, 0), (8, 9), (19, 9), (30, 9), (0, 5), (11, 5), (8, 18), (19, 18), (0, 14), (11, 14), (11, 23), (10, 27), (4, 2), (22, 10), (22, 19), (3, 15), (14, 15), (22, 28), (3, 24), (14, 24), (15, 7), (26, 7), (7, 3), (18, 3), (15, 16), (26, 16), (7, 12), (18, 12), (26, 25), (7, 21), (18, 21), (7, 30), (18, 30), (27, 8), (29, 27), (8, 4), (19, 4), (30, 4), (11, 0), (30, 13), (0, 9), (11, 9), (25, 11), (10, 22), (25, 20), (10, 31), (2, 27), (25, 29), (22, 5), (3, 1), (14, 1), (22, 14), (3, 10), (14, 10), (22, 23), (14, 19), (3, 28), (14, 28), (26, 2), (15, 11), (26, 11), (7, 7), (18, 7), (26, 20), (7, 16), (18, 16), (29, 13), (29, 22), (21, 18), (29, 31), (21, 27), (11, 4), (10, 8), (25, 6), (10, 17), (2, 13), (25, 15), (10, 26), (2, 22), (25, 24), (22, 0), (2, 31), (22, 9), (3, 5), (22, 18), (3, 14), (14, 14), (3, 23), (14, 23), (26, 6), (17, 25), (7, 2), (7, 11), (18, 11), (29, 8), (29, 17), (6, 24), (29, 26), (21, 31), (10, 3), (25, 1), (10, 12), (2, 8), (25, 10), (10, 30), (2, 26), (25, 28), (22, 4), (3, 0), (14, 0), (3, 9), (3, 18), (14, 18), (17, 20), (28, 20), (5, 27), (28, 29), (9, 25), (29, 3), (29, 12), (21, 8), (6, 19), (29, 21), (21, 17), (29, 30), (2, 3), (25, 5), (10, 16), (25, 14), (2, 21), (2, 30), (22, 8), (24, 27), (3, 4), (14, 4), (28, 6), (17, 15), (28, 15), (9, 11), (5, 22), (17, 24), (28, 24), (9, 20), (9, 29), (6, 5), (29, 7), (21, 3), (6, 14), (29, 16), (21, 12), (29, 25), (21, 21), (21, 30), (25, 0), (10, 11), (2, 7), (25, 9), (2, 16), (24, 13), (13, 22), (16, 18), (1, 29), (13, 31), (24, 31), (17, 1), (28, 1), (9, 6), (5, 17), (28, 19), (9, 15), (5, 26), (17, 28), (28, 28), (6, 0), (29, 2), (6, 9), (21, 7), (21, 16), (20, 20), (20, 29), (31, 29), (10, 6), (12, 25), (2, 2), (2, 11), (4, 30), (1, 15), (13, 17), (24, 17), (1, 24), (13, 26), (24, 26), (16, 22), (16, 31), (5, 3), (9, 1), (5, 12), (17, 14), (9, 10), (5, 21), (17, 23), (9, 19), (5, 30), (9, 28), (6, 4), (29, 6), (21, 2), (6, 13), (20, 15), (31, 15), (20, 24), (12, 20), (23, 20), (12, 29), (4, 25), (13, 3), (24, 3), (1, 10), (13, 12), (24, 12), (16, 8), (1, 19), (13, 21), (16, 17), (1, 28), (13, 30), (16, 26), (17, 0), (28, 0), (5, 7), (17, 9), (28, 9), (9, 5), (5, 16), (28, 18), (5, 25), (27, 22), (27, 31), (19, 27), (30, 27), (20, 1), (31, 1), (20, 10), (31, 10), (12, 6), (23, 6), (20, 19), (12, 15), (23, 15), (20, 28), (4, 11), (31, 28), (12, 24), (23, 24), (4, 20), (4, 29), (1, 5), (24, 7), (16, 3), (1, 14), (13, 16), (16, 12), (24, 25), (16, 21), (16, 30), (5, 2), (17, 4), (28, 4), (9, 0), (9, 9), (27, 17), (8, 13), (27, 26), (30, 22), (11, 18), (8, 31), (19, 31), (30, 31), (11, 27), (20, 5), (12, 1), (23, 1), (20, 14), (12, 10), (23, 10), (20, 23), (4, 6), (31, 23), (12, 19), (23, 19), (4, 15), (12, 28), (23, 28), (1, 0), (13, 2), (24, 2), (1, 9), (24, 11), (16, 7), (16, 16), (15, 29), (26, 29), (5, 6), (7, 25), (27, 12), (8, 8), (19, 8), (27, 21), (0, 4), (30, 8), (8, 17), (30, 17), (0, 13), (11, 13), (19, 26), (30, 26), (0, 22), (11, 22), (31, 0), (0, 31), (11, 31), (20, 9), (31, 9), (12, 5), (23, 5), (20, 18), (4, 1), (31, 18), (12, 14), (23, 14), (4, 10), (23, 23), (4, 19), (4, 28), (1, 4), (24, 6), (1, 13), (15, 24), (26, 24), (18, 20), (18, 29), (27, 7), (8, 3), (19, 3), (27, 16), (30, 3), (19, 12), (30, 12), (11, 8), (0, 8), (8, 21), (30, 21), (0, 17), (11, 17), (8, 30), (19, 30), (30, 30), (0, 26), (20, 4), (31, 4), (23, 0), (20, 13), (31, 13), (12, 9), (23, 9), (4, 5), (23, 18), (4, 14), (22, 22), (22, 31), (14, 27), (15, 10), (26, 10), (7, 6), (26, 19), (7, 15), (18, 15), (26, 28), (7, 24), (18, 24), (27, 2), (27, 11), (8, 7), (19, 7), (27, 20), (11, 3), (0, 3), (8, 16), (19, 16), (30, 7), (0, 12), (11, 12), (30, 25), (0, 21), (11, 21), (11, 30), (23, 4), (25, 23), (4, 0), (4, 9), (22, 17), (3, 13), (14, 13), (22, 26), (3, 22), (14, 22), (3, 31), (14, 31), (15, 5), (26, 5), (7, 1), (18, 1), (15, 14), (26, 14), (7, 10), (18, 10), (15, 23), (26, 23), (7, 19), (18, 28), (19, 2), (0, 7), (11, 7), (0, 16), (11, 16), (10, 20), (25, 18), (10, 29), (2, 25), (25, 27), (22, 12), (3, 8), (14, 8), (22, 21), (3, 17), (22, 30), (3, 26), (14, 26), (15, 0), (26, 0), (15, 9), (26, 9), (7, 5), (18, 5), (15, 18), (26, 18), (7, 14), (18, 23), (29, 20), (6, 27), (29, 29), (19, 6), (21, 25), (0, 2), (11, 2), (10, 15), (10, 24), (25, 22), (2, 29), (22, 7), (14, 3), (22, 16), (3, 12), (22, 25), (3, 21), (3, 30), (14, 30), (15, 4), (26, 4), (7, 0), (18, 0), (15, 13), (26, 13), (7, 9), (18, 9), (18, 18), (29, 15), (6, 22), (21, 20), (6, 31), (21, 29), (10, 10), (2, 6), (25, 8), (10, 19), (2, 15), (25, 17), (10, 28), (2, 24), (25, 26), (22, 11), (3, 7), (14, 7), (22, 20), (3, 16), (14, 16), (3, 25), (14, 25), (17, 18), (17, 27), (28, 27), (18, 4), (9, 23), (6, 8), (21, 6), (6, 17), (29, 19), (21, 15), (6, 26), (29, 28), (21, 24), (10, 5), (2, 1), (10, 14), (2, 10), (25, 12), (10, 23), (25, 21), (2, 28), (22, 6), (13, 25), (14, 2), (3, 11), (17, 13), (28, 13), (5, 20), (28, 22), (5, 29), (17, 31), (28, 31), (9, 27), (29, 5), (21, 1), (6, 12), (29, 14), (21, 10), (21, 19), (6, 30), (21, 28), (10, 0), (10, 9), (2, 5), (25, 7), (10, 18), (2, 14), (25, 16), (2, 23), (22, 1), (13, 20), (1, 27), (13, 29), (16, 25), (17, 8), (28, 8), (9, 4), (5, 15), (17, 17), (28, 17), (9, 13), (5, 24), (17, 26), (28, 26), (9, 22), (29, 0), (9, 31), (6, 7), (21, 5), (6, 16), (29, 18), (21, 14), (6, 25), (21, 23), (20, 27), (31, 27), (10, 4), (2, 0), (25, 2), (10, 13), (2, 9), (2, 18), (24, 15), (16, 11), (1, 22), (13, 24), (24, 24), (1, 31), (5, 1), (17, 3), (5, 10), (17, 12), (28, 12), (9, 8), (5, 19), (17, 21), (28, 21), (9, 17), (5, 28), (17, 30), (29, 4), (21, 0), (6, 11), (21, 9), (6, 20), (20, 22), (31, 22), (12, 18), (20, 31), (31, 31), (12, 27), (23, 27), (2, 4), (13, 1), (1, 8), (13, 10), (16, 6), (13, 19), (24, 19), (16, 15), (1, 26), (13, 28), (24, 28), (16, 24), (5, 5), (17, 7), (28, 7), (9, 3), (5, 14), (17, 16), (9, 12), (5, 23), (9, 21), (27, 29), (6, 6), (0, 30), (20, 8), (31, 8), (20, 17), (31, 17), (12, 13), (23, 13), (20, 26), (31, 26), (12, 22), (23, 22), (12, 31), (23, 31), (4, 27), (1, 3), (13, 5), (24, 5), (16, 1), (1, 12), (13, 14), (24, 14), (1, 21), (13, 23), (24, 23), (16, 19), (1, 30), (16, 28), (5, 0), (17, 2), (28, 2), (5, 9), (17, 11), (9, 16), (27, 15), (27, 24), (6, 1), (19, 20), (8, 29), (19, 29), (0, 25), (11, 25), (20, 3), (31, 3), (20, 12), (31, 12), (20, 21), (23, 17), (20, 30), (4, 13), (31, 30), (12, 26), (23, 26), (24, 0), (1, 7), (24, 9), (16, 5), (1, 16), (13, 18), (24, 18), (16, 14), (1, 25), (16, 23), (15, 27), (26, 27), (5, 4), (9, 2), (5, 13), (27, 10), (8, 6), (8, 15), (19, 15), (30, 15), (0, 11), (11, 11), (8, 24), (11, 20), (0, 29), (11, 29), (20, 7), (31, 7), (12, 3), (20, 16), (31, 16), (12, 12), (23, 12), (20, 25), (4, 8), (31, 25), (12, 21), (4, 17), (23, 30), (1, 2), (13, 4), (24, 4), (16, 0), (1, 11), (1, 20), (15, 22), (26, 22), (7, 18), (15, 31), (26, 31), (7, 27), (18, 27), (27, 5), (19, 1), (30, 1), (27, 14), (8, 10), (19, 10), (30, 10), (0, 6), (11, 6), (8, 19), (19, 19), (30, 19), (0, 15), (11, 15), (8, 28), (30, 28), (20, 2), (31, 2), (20, 11), (31, 11), (12, 7), (23, 7), (31, 20), (4, 3), (12, 16), (23, 16), (4, 12), (4, 21), (22, 29), (1, 6), (16, 4), (15, 8), (26, 8), (15, 17), (26, 17), (18, 13), (15, 26), (26, 26), (7, 22), (27, 0), (7, 31), (18, 31), (27, 9), (8, 5), (19, 5), (27, 18), (11, 1), (0, 1), (8, 14), (19, 14), (30, 14), (0, 10), (11, 10), (8, 23), (19, 23), (0, 19), (11, 19), (0, 28), (11, 28), (20, 6), (31, 6), (12, 2), (23, 2), (12, 11), (23, 11), (4, 7), (4, 16), (1, 1), (3, 20), (14, 20), (3, 29), (26, 3), (7, 8)]
    obstacles = [(26, 21), (12, 4), (6, 18), (16, 20), (16, 29), (7, 26), (28, 3), (23, 25), (30, 18), (28, 30), (9, 26), (0, 23), (24, 8), (6, 2), (13, 8), (16, 13), (25, 25), (18, 19), (7, 28), (27, 6), (3, 6), (28, 5), (8, 2), (30, 2), (17, 5), (28, 14), (30, 11), (8, 11), (19, 11), (28, 23), (4, 23), (24, 1), (24, 10), (1, 17), (15, 25), (22, 3), (31, 24), (14, 17), (28, 16), (0, 0), (23, 29), (8, 25), (21, 4), (24, 21), (18, 14), (24, 30), (7, 23), (27, 1), (30, 6), (3, 19), (4, 18), (9, 14), (15, 2), (25, 4), (25, 13), (16, 10), (8, 27), (2, 20), (25, 31), (3, 3), (31, 19), (6, 29), (28, 11), (14, 12), (9, 7), (14, 21), (5, 18), (13, 7), (8, 20), (30, 20), (24, 16), (30, 29), (1, 23), (21, 11), (12, 8), (14, 5), (23, 8), (4, 4), (29, 24), (12, 17), (31, 21), (5, 11), (22, 27), (4, 22), (10, 1), (13, 0), (4, 31), (19, 13), (13, 9), (15, 6), (28, 25), (8, 22), (18, 2), (19, 22), (0, 18), (9, 30), (0, 27), (31, 5), (22, 2), (6, 15), (31, 14), (21, 13), (21, 22), (4, 24), (27, 19), (27, 28), (13, 11), (19, 24), (10, 21), (1, 18), (0, 20), (25, 19), (2, 17), (29, 1), (26, 12), (30, 24), (7, 4), (29, 10), (15, 20), (23, 3), (22, 13), (14, 9), (18, 25), (23, 21), (27, 3), (12, 30), (4, 26), (26, 1), (25, 3), (19, 17), (27, 30), (17, 29), (8, 26), (16, 9), (2, 19), (20, 0), (6, 10), (3, 2), (6, 28), (14, 11), (21, 26), (12, 23), (8, 1), (10, 7), (27, 23), (17, 22), (16, 2), (9, 18), (2, 12), (19, 28), (10, 25), (0, 24), (11, 24), (6, 3), (15, 15), (26, 15), (13, 27), (29, 23), (6, 21), (7, 20), (7, 29), (17, 6), (8, 12), (27, 25), (19, 21), (5, 31), (11, 26), (24, 20), (12, 0), (7, 13), (24, 29), (6, 23), (14, 6), (18, 22), (30, 5), (10, 2), (27, 27), (3, 27), (30, 23), (15, 1), (13, 13), (29, 9), (18, 6), (24, 22), (15, 19), (15, 28), (25, 30), (16, 27), (22, 15), (5, 8), (22, 24), (28, 10), (17, 10), (17, 19), (30, 16), (14, 29), (19, 25), (9, 24), (13, 6), (15, 3), (13, 15), (15, 12), (29, 11), (18, 8)]
    VARIABILITY = 2
    f = open(f'variability_data/variability{VARIABILITY}_agents2.csv', 'a+')
    NUM_AGENTS = 2
    
    try:
        for i in range(1, 1001):
            startPos = []
            goalPos = []
            for numagents in range(NUM_AGENTS):
                s = (random.randint(0, 31), random.randint(0, 31))
                g = (random.randint(0, 31), random.randint(0, 31))
                while s == g or s in obstacles or g in obstacles or s in startPos or s in goalPos or g in goalPos or g in startPos:
                    s = (random.randint(0, 31), random.randint(0, 31))
                    g = (random.randint(0, 31), random.randint(0, 31))
                startPos.append(s)
                goalPos.append(g)
            totalTime, dist, replanningCnt = CBSClass.solve(startPos, goalPos, obstacles, freeCells, 32, 32, 10)
            print(dist, replanningCnt, totalTime)
            output = ''
            for s, g in zip(startPos, goalPos):
                output += f'{s[0]},{s[1]},{g[0]},{g[1]},'
            output += f'{dist},{replanningCnt},{totalTime}\n'
            f.write(output)
            for j in range(20):
                variedStartPos, variedGoalPos = [], []
                for numagents in range(NUM_AGENTS):
                    s = (random.randint(-VARIABILITY, VARIABILITY), random.randint(-VARIABILITY, VARIABILITY))
                    g = (random.randint(-VARIABILITY, VARIABILITY), random.randint(-VARIABILITY, VARIABILITY))
                    newStart = (startPos[numagents][0] + s[0], startPos[numagents][1] + s[1])
                    newGoal = (goalPos[numagents][0] + g[0], goalPos[numagents][1] + g[1])
                    while newStart == newGoal or newStart in obstacles or newGoal in obstacles or newStart in startPos or newStart in goalPos or newGoal in goalPos or newGoal in startPos:
                        s = (random.randint(-VARIABILITY, VARIABILITY), random.randint(-VARIABILITY, VARIABILITY))
                        g = (random.randint(-VARIABILITY, VARIABILITY), random.randint(-VARIABILITY, VARIABILITY))
                        newStart = (startPos[numagents][0] + s[0], startPos[numagents][1] + s[1])
                        newGoal = (goalPos[numagents][0] + g[0], goalPos[numagents][1] + g[1])
                    newStart = list(newStart)
                    newGoal = list(newGoal)
                    if newStart[0] < 0: newStart[0] = 0
                    if newStart[0] > 31: newStart[0] = 31
                    if newStart[1] < 0: newStart[1] = 0
                    if newStart[1] > 31: newStart[1] = 31
                    if newGoal[0] < 0: newGoal[0] = 0
                    if newGoal[0] > 31: newGoal[0] = 31
                    if newGoal[1] < 0: newGoal[1] = 0
                    if newGoal[1] > 31: newGoal[1] = 31
                    variedStartPos.append(tuple(newStart))
                    variedGoalPos.append(tuple(newGoal))
                totalTime, dist, replanningCnt = CBSClass.solve(variedStartPos, variedGoalPos, obstacles, freeCells, 32, 32, 10)
                print(dist, replanningCnt, totalTime)
                output = ''
                for s, g in zip(variedStartPos, variedGoalPos):
                    output += f'{s[0]},{s[1]},{g[0]},{g[1]},'
                output += f'{dist},{replanningCnt},{totalTime}\n'
                f.write(output)
            f.write('-----\n')
            f.close()
            print(f"{i} Explorations Run")
            f = open(f'variability_data/variability{VARIABILITY}_agents2.csv', 'a+')
    except KeyboardInterrupt:
        pass

else:
    # std = {'2':0 , '3': 0, '4': 0, '5': 0}
    # mean = {'2':0 , '3': 0, '4': 0, '5': 0}
    # for i in range(2, 6):
        # df = pd.read_csv(f'variability2agents{i}.csv')
        # std[str(i)] = df.iloc[:, 10:11].std()[0]
        # mean[str(i)] = df.iloc[:, 10:11].mean()[0]
    f = open('variability_data/variability2_agents2.csv')
    explorationTimes = []
    stds = []
    for line in f.readlines()[1:]:
        if line == '-----\n':
            explorationTimes = sorted(explorationTimes)[5:-5]
            stds.append(statistics.stdev(explorationTimes))
            explorationTimes = []
        else:
            explorationTimes.append(float(line))
    plt.boxplot(stds)
    plt.show()